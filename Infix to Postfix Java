import java.util.Stack;

public class InfixToPostfix {
    private String infix;
    private String postfix;

    public InfixToPostfix(String infix) {
        this.infix = infix;
        this.postfix = convertToPostfix();
    }

    public String getInfix() {
        return infix;
    }

    public String showInfix() {
        return infix;
    }

    public String showPostfix() {
        return postfix;
    }

    private int precedence(char operator) {
        if (operator == '+' || operator == '-') {
            return 1;
        } else if (operator == '*' || operator == '/') {
            return 2;
        }
        return 0;
    }

    private String convertToPostfix() {
        StringBuilder postfix = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (char symbol : infix.toCharArray()) {
            if (Character.isLetterOrDigit(symbol)) {
                postfix.append(symbol);
            } else if (symbol == '(') {
                stack.push(symbol);
            } else if (symbol == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop();
            } else {
                while (!stack.isEmpty() && precedence(symbol) <= precedence(stack.peek())) {
                    postfix.append(stack.pop());
                }
                stack.push(symbol);
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    public static void main(String[] args) {
        String[] expressions = {"A + B - C", "(A + B ) * C", "(A + B) * (C - D)",
                "A + ((B + C) * (E - F) - G) / (H - I)", "A + B * (C + D ) - E / F * G + H"};
        for (String expression : expressions) {
            InfixToPostfix converter = new InfixToPostfix(expression);
            System.out.println("Infix Expression: " + converter.showInfix());
            System.out.println("Postfix Expression: " + converter.showPostfix());
            System.out.println();
        }
    }
}
